# -*- coding: utf-8 -*-
"""
Created on Fri Nov  9 18:19:43 2018

@author: matta
"""

#importation des librairies
import numpy as np

#création des variables
exected_output = [0., 1., 1., 0.]

layer_1 = [[0., 0., 1., 1.],
           [0., 1., 0., 1.]]

bias_layer_1 = [-10., -30]
bias_layer_2 = [-20.]

weight_layer_1 = [[20., 20.],
                   [20., 20.]]
weight_layer_2 = [[30., -30.]]

#création des fonctions
def sigmoid(z):
    return 1.0/(1.0+np.exp(-z))

def calculate_pd_error_wrt_output(actual_output, target_output):
    return -(target_output - actual_output)

def remove_bias(matrice, bias):
    """
    Input : matrix, vector of bias
    Output : matrix
    Do : remove the umpteenth bias to the umpteenth ligne 
    of the matrix
    """
    len_b = len(bias) #calcul la longeur de la liste des bias
    for i in range(len_b):
        matrice[i,:] += bias[i] #enleve le iéme bias à la ligne i de la matrice
    return matrice

def cost(out, target):
    len_target = len(target)
    cost = 0
    for i in range(len_target):
        cost += (target[i] - out[0, i])**2
    return 1/len_target * cost
    

#corp programme
layer_2 = sigmoid(remove_bias(np.dot(weight_layer_1, layer_1), bias_layer_1))
print(layer_2)
layer_3 = sigmoid(remove_bias(np.dot(weight_layer_2, layer_2), bias_layer_2))
print(layer_3)
cost = cost(layer_3, exected_output)
print(cost)
